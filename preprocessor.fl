%{
	#include <stdio.h>
	#include <string.h>
	/*
	typedef struct {
		char * fName;
		int argNum;	
	}FUNC;
	*/
	int count=0;
	int countArguments(char* s){
		char *c =s;
		int count =1;
		while (*c != '\0'){
			if (*c == '(' && *(c+1)==')')
				return 0;
			if( *c == ',')
				count++;
			c++;
		}
		return count;
	}
%}

WS [\t\n\r ]+
ID [a-zA-Z0-9]+
TYPESPECIFIER int|void
FID ([a-z][a-zA-Z]*) 
PARAM {TYPESPECIFIER}\ {FID}
NUM [0-9]+
ARG {TYPESPECIFIER}\ {NUM}
FCALL {FID}\ ?\(({NUM},\ ?)*{NUM}?\)
%%
{TYPESPECIFIER}\ main\ ?\(\)	{ fprintf(yyout,"%s",yytext);}
printf				{fprintf(yyout,"%s",yytext);}
{TYPESPECIFIER}\ {FID}\ ?\(({PARAM},\ )*{PARAM}?\) {
		count = countArguments(yytext);
		char *c = yytext;
		//printf("%s\n",c);
		while(*c!=' ')
			c++;
		c++;
		while(*c!=' ' && *c!='(')
			c++;
		char *tmp = (char *)malloc(sizeof(char)*100);
		//printf("lel\n");
		strcpy(tmp,c);
		//printf("%s\n",tmp);
		*c = count +48;
		*(c+1)='\0';
		//strcat(c,tmp);
		char *result = (char *)malloc(sizeof(char)*100);
		strcpy(result,yytext);
		strcat(result,tmp);
		fprintf(yyout,"%s",result);
	}
{FCALL}	{	
		//printf("Matched = %s\n",yytext);
		count = countArguments(yytext);
		char *c = yytext;
		//printf("c = %s\n",c);
		while(*c!='(')
			c++;
		char *tmp = (char *)malloc(sizeof(char)*100);
		//printf("lel\n");
		strcpy(tmp,c);
		//printf("tmp = %s\n",tmp);
		*c = count +48;
		*(c+1)='\0';
		//printf("yytext before cat = %s\n",yytext);
		//printf("tmp before cat = %s__\n",tmp);
		//strcat(c,tmp);
		char *result = (char *)malloc(sizeof(char)*100);
		strcpy(result,yytext);
		strcat(result,tmp);
		fprintf(yyout,"%s",result);
		
	}
;	{
		ECHO;
	}
.	{
		ECHO;
	}

%%
	main(int argc,char **argv){
		if(argc<2){
			printf("You have to give an output filename\n");
			exit(-1);
		} else {
			yyout = fopen(argv[1],"w");
		}
	
		yylex();
	}

